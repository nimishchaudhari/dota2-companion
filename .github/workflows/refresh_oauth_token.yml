name: Update Claude OAuth Token

on:
  schedule:
    - cron: '0 * * * *'
  workflow_dispatch: # Manual execution allowed
    inputs:
      force:
        description: 'Force token refresh regardless of expiration'
        required: false
        default: false
        type: boolean
jobs:
  update-token:
    runs-on: ubuntu-latest
    env:
      TOKEN_URL: https://console.anthropic.com/v1/oauth/token
      CLIENT_ID: 9d1c250a-e61b-44d9-88ed-5944d1962f5e
      ACCESS_TOKEN: ${{ secrets.CLAUDE_ACCESS_TOKEN }}
      REFRESH_TOKEN: ${{ secrets.CLAUDE_REFRESH_TOKEN }}
      EXPIRES_AT: ${{ secrets.CLAUDE_EXPIRES_AT }}
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Check token expiration
      id: check-expiration
      run: |
        CURRENT_TIME_MS=$(date +%s000)
        
        echo "Current time: $CURRENT_TIME_MS"
        echo "Token expires at: $EXPIRES_AT"
        
        # Check if refresh is needed with 1-hour threshold
        THRESHOLD=$((CURRENT_TIME_MS + 3600000))
        
        # Force refresh if force option is enabled
        if [ "${{ github.event.inputs.force }}" = "true" ]; then
          echo "Force refresh requested"
          echo "TOKEN_VALID=false" >> $GITHUB_OUTPUT
        elif [ "$THRESHOLD" -lt "$EXPIRES_AT" ]; then
          echo "Token still valid"
          echo "TOKEN_VALID=true" >> $GITHUB_OUTPUT
        else
          echo "Token needs refresh within 1 hour, refreshing..."
          echo "TOKEN_VALID=false" >> $GITHUB_OUTPUT
        fi
                
    - name: Refresh Claude Token
      id: refresh
      if: steps.check-expiration.outputs.TOKEN_VALID == 'false'
      run: |
        # Token refresh request (using curl)
        RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" -X POST "$TOKEN_URL" \
          -H "Content-Type: application/json" \
          -d "{
            \"grant_type\": \"refresh_token\",
            \"refresh_token\": \"$REFRESH_TOKEN\",
            \"client_id\": \"$CLIENT_ID\"
          }")
        
        # Separate HTTP status code and response
        HTTP_STATUS=$(echo $RESPONSE | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
        RESPONSE_BODY=$(echo $RESPONSE | sed -e 's/HTTPSTATUS:.*//g')
        
        if [ "$HTTP_STATUS" -ne 200 ]; then
          echo "Error: HTTP $HTTP_STATUS"
          echo "Response: $RESPONSE_BODY"
          exit 1
        fi
        
        # Extract token information from JSON response
        NEW_ACCESS_TOKEN=$(echo "$RESPONSE_BODY" | jq -r '.access_token')
        NEW_REFRESH_TOKEN=$(echo "$RESPONSE_BODY" | jq -r '.refresh_token // empty')
        EXPIRES_IN=$(echo "$RESPONSE_BODY" | jq -r '.expires_in')

        # Validate required fields
        if [ -z "$NEW_ACCESS_TOKEN" ] || [ "$NEW_ACCESS_TOKEN" = "null" ]; then
          echo "Error: Failed to extract access token from response"
          exit 1
        fi
        
        if [ -z "$EXPIRES_IN" ] || [ "$EXPIRES_IN" = "null" ]; then
          echo "Error: Failed to extract expires_in from response"
          exit 1
        fi

        CURRENT_TIME_MS=$(date +%s000)

        # Calculate new expiration time (current time + expires_in * 1000)
        NEW_EXPIRES_AT=$((CURRENT_TIME_MS + (EXPIRES_IN * 1000)))
        
        # Keep existing refresh_token if new one is not provided (same as original logic)
        if [ "$NEW_REFRESH_TOKEN" = "null" ] || [ -z "$NEW_REFRESH_TOKEN" ]; then
          NEW_REFRESH_TOKEN="$REFRESH_TOKEN"
        fi
        
        echo "Token refreshed successfully"
        echo "New token expires at: $NEW_EXPIRES_AT"
        
        # Set GitHub Actions outputs
        echo "TOKEN_REFRESHED=true" >> $GITHUB_OUTPUT
        echo "::add-mask::$NEW_ACCESS_TOKEN"
        echo "NEW_ACCESS_TOKEN=$NEW_ACCESS_TOKEN" >> $GITHUB_OUTPUT
        echo "::add-mask::$NEW_REFRESH_TOKEN"
        echo "NEW_REFRESH_TOKEN=$NEW_REFRESH_TOKEN" >> $GITHUB_OUTPUT
        echo "NEW_EXPIRES_AT=$NEW_EXPIRES_AT" >> $GITHUB_OUTPUT
        
        
    - name: Update GitHub Secrets
      if: steps.refresh.outputs.TOKEN_REFRESHED == 'true'
      run: |
        echo "Updating GitHub secrets..."
        
        # Validate and update token values
        if [ -n "${{ steps.refresh.outputs.NEW_ACCESS_TOKEN }}" ]; then
          gh secret set CLAUDE_ACCESS_TOKEN --body "${{ steps.refresh.outputs.NEW_ACCESS_TOKEN }}" --repo "${{ github.repository }}"
          echo "Access token updated"
        else
          echo "Error: New access token is empty"
          exit 1
        fi
        
        if [ -n "${{ steps.refresh.outputs.NEW_REFRESH_TOKEN }}" ]; then
          gh secret set CLAUDE_REFRESH_TOKEN --body "${{ steps.refresh.outputs.NEW_REFRESH_TOKEN }}" --repo "${{ github.repository }}"
          echo "Refresh token updated"
        else
          echo "Error: New refresh token is empty"
          exit 1
        fi
        
        if [ -n "${{ steps.refresh.outputs.NEW_EXPIRES_AT }}" ]; then
          gh secret set CLAUDE_EXPIRES_AT --body "${{ steps.refresh.outputs.NEW_EXPIRES_AT }}" --repo "${{ github.repository }}"
          echo "Expires at updated"
        else
          echo "Error: New expires at is empty"
          exit 1
        fi
        
        echo "GitHub secrets updated successfully"
      env:
        GH_TOKEN: ${{ secrets.GH_TOKEN }}
        
    - name: Log token status
      run: |
        if [ "${{ steps.refresh.outputs.TOKEN_REFRESHED }}" == "true" ]; then
          echo "‚úÖ Token was renewed"
          # Display new expiration time in human-readable format
          NEW_EXPIRES_SECONDS=$((${{ steps.refresh.outputs.NEW_EXPIRES_AT }} / 1000))
          echo "üïê New expiration: $(date -d @$NEW_EXPIRES_SECONDS)"
        else
          echo "‚ÑπÔ∏è Token is still valid, no renewal needed"
          # Display current expiration time in human-readable format
          CURRENT_EXPIRES_SECONDS=$((${{ secrets.CLAUDE_EXPIRES_AT }} / 1000))
          echo "üïê Current expiration: $(date -d @$CURRENT_EXPIRES_SECONDS)"
        fi
        
    - name: Notify on failure
      if: failure()
      run: |
        echo "‚ùå Claude OAuth token refresh failed!"
        # Send notification via Slack etc. if needed
        # curl -X POST -H 'Content-type: application/json' \
        #   --data '{"text":"Claude OAuth token refresh failed!"}' \
        #   ${{ secrets.SLACK_WEBHOOK_URL }}